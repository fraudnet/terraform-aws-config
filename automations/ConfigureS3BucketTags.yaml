description: |

  ## What does this document do?
  Based the bucket name this document add tag. 
  - If bucket has Sagemaker in name, the cost tag is DataScience
  - If bucket has fn-terragrunt-state in name, the cost tag is Terraform

schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  BucketName:
    type: String
    description: (Required) Name of the S3 bucket (not the ARN).
    allowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  AutomationAssumeRole:
    type: String
    description: (Required) ARN of the role that allows Automation to perform the actions
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+
mainSteps:
  - name: ChoseTag
    action: aws:branch
    inputs:
      Choices:
      - NextStep: SetBucketTagsDataScience
        Variable: "{{BucketName}}"
        Contains: Sagemaker
      - NextStep: SetBucketTagsDataScience
        Variable: "{{BucketName}}"
        Contains: sagemaker
      - NextStep: SetBucketTagsTerraform
        Variable: "{{BucketName}}"
        StartsWith: fn-terragrunt-state
      Default:
        SetBucketTagsEqualName
  - name: SetBucketTagsDataScience
    action: "aws:executeAwsApi"
    isEnd: true
    inputs:
      Service: s3
      Api: PutBucketTagging
      Bucket: "{{BucketName}}"
      Tagging:
        TagSet:
          - Key: cost
            Value: DataScience
    isCritical: true
    maxAttempts: 2
    timeoutSeconds: 600

  - name: SetBucketTagsTerraform
    action: "aws:executeAwsApi"
    isEnd: true
    inputs:
      Service: s3
      Api: PutBucketTagging
      Bucket: "{{BucketName}}"
      Tagging:
        TagSet:
          - Key: cost
            Value: Terraform
    isCritical: true
    maxAttempts: 2
    timeoutSeconds: 600

  - name: SetBucketTagsEqualName
    action: "aws:executeAwsApi"
    isEnd: true
    inputs:
      Service: s3
      Api: PutBucketTagging
      Bucket: "{{BucketName}}"
      Tagging:
        TagSet:
          - Key: cost
            Value: "{{BucketName}}"
    isCritical: true
    maxAttempts: 2
    timeoutSeconds: 600

  # - name: GetBucketTags
  #   action: "aws:executeScript"
  #   description: |
  #     ## GetBucketTags
  #     Retrieves the S3 lifecycle configuration for a S3 Bucket.
  #     ## Outputs
  #     * Output: JSON formatted response from the GetBucketTags API call.
  #   timeoutSeconds: 600
  #   isCritical: true
  #   isEnd: true
  #   inputs:
  #     Runtime: python3.8
  #     Handler: validate_s3_bucket_lifecycle_configuration
  #     InputPayload:
  #       Bucket: "{{BucketName}}"
  #       NoncurrentDays: "{{ NoncurrentDays }}"
  #     Script: |-
  #       import boto3

  #       def validate_s3_bucket_lifecycle_configuration(event, context):
  #           s3_client = boto3.client("s3")
  #           bucket = event["Bucket"]
  #           noncurrent_expiration_days = event["NoncurrentDays"]

  #           output = s3_client.get_bucket_lifecycle_configuration(Bucket=bucket)
  #           updated_rules = output["Rules"]

  #           if any(
  #               updated_rule["NoncurrentVersionExpiration"]["NoncurrentDays"] == noncurrent_expiration_days
  #               and updated_rule["Status"] == "Enabled"
  #               for updated_rule in updated_rules
  #           ):
  #               return {
  #                   "output":
  #                   {
  #                       "message": "Bucket lifecycle configuration successfully set.",
  #                       "configuration": updated_rules
  #                   }
  #               }
  #           else:
  #               info = f"CONFIGURATION VALUES DO NOT MATCH WITH PARAMETERS PROVIDED VALUES NoncurrentDays: noncurrent_expiration_days, {updated_rules}"
  #               raise Exception(info)
  #   outputs:
  #     - Name: Output
  #       Selector: $.Payload.output
  #       Type: StringMap

